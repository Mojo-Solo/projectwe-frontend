import React, { useState, useEffect, useRef } from 'react';
import { Send, Bot, User, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useWebSocket } from '@/hooks/useWebSocket';
import { useAuth } from '@/hooks/useAuth';

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  agent?: string;
  streaming?: boolean;
}

interface AIAgentSelectorProps {
  agents: Array<{ name: string; description: string }>;
  selectedAgent: string;
  onSelectAgent: (agent: string) => void;
}

const AIAgentSelector: React.FC<AIAgentSelectorProps> = ({
  agents,
  selectedAgent,
  onSelectAgent,
}) => {
  return (
    <div className="flex gap-2 mb-4 overflow-x-auto">
      {agents.map((agent) => (
        <Button
          key={agent.name}
          variant={selectedAgent === agent.name ? 'default' : 'outline'}
          size="sm"
          onClick={() => onSelectAgent(agent.name)}
          className="whitespace-nowrap"
        >
          {agent.name}
        </Button>
      ))}
    </div>
  );
};

export const AIChat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedAgent, setSelectedAgent] = useState('strategy');
  const [streamingMessage, setStreamingMessage] = useState<string>('');
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { user, workspace } = useAuth();
  const { sendMessage, isConnected } = useWebSocket({
    onMessage: handleWebSocketMessage,
    onConnect: handleWebSocketConnect,
  });

  const agents = [
    { name: 'strategy', description: 'Exit strategy planning' },
    { name: 'valuation', description: 'Business valuation analysis' },
    { name: 'risk', description: 'Risk assessment' },
    { name: 'timeline', description: 'Timeline planning' },
    { name: 'market', description: 'Market analysis' },
    { name: 'tax', description: 'Tax implications' },
    { name: 'legal', description: 'Legal considerations' },
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages, streamingMessage]);

  function handleWebSocketMessage(data: any) {
    switch (data.type) {
      case 'stream_started':
        setIsLoading(true);
        break;
      
      case 'stream_chunk':
        setStreamingMessage((prev) => prev + data.chunk);
        break;
      
      case 'stream_completed':
        if (streamingMessage) {
          addMessage({
            role: 'assistant',
            content: streamingMessage,
            agent: data.agent,
          });
          setStreamingMessage('');
        }
        if (data.response) {
          addMessage({
            role: 'assistant',
            content: JSON.stringify(data.response.data, null, 2),
            agent: data.agent,
          });
        }
        setIsLoading(false);
        break;
      
      case 'stream_error':
        addMessage({
          role: 'system',
          content: `Error: ${data.error}`,
        });
        setIsLoading(false);
        break;
    }
  }

  function handleWebSocketConnect() {
    if (user && workspace) {
      sendMessage({
        type: 'auth',
        token: user.token,
        workspace_id: workspace.id,
      });
    }
  }

  function addMessage(message: Omit<Message, 'id' | 'timestamp'>) {
    setMessages((prev) => [
      ...prev,
      {
        ...message,
        id: crypto.randomUUID(),
        timestamp: new Date(),
      },
    ]);
  }

  function scrollToBottom() {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }

  async function handleSend() {
    if (!input.trim() || isLoading || !isConnected) return;

    const userMessage = input.trim();
    setInput('');
    
    addMessage({
      role: 'user',
      content: userMessage,
    });

    sendMessage({
      type: 'agent_request',
      agent: selectedAgent,
      input: {
        query: userMessage,
        context: {
          workspace_id: workspace?.id,
          previous_messages: messages.slice(-5),
        },
      },
      stream_id: crypto.randomUUID(),
    });
  }

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>AI Exit Planning Assistant</CardTitle>
        <AIAgentSelector
          agents={agents}
          selectedAgent={selectedAgent}
          onSelectAgent={setSelectedAgent}
        />
      </CardHeader>
      
      <CardContent className="flex-1 flex flex-col">
        <ScrollArea className="flex-1 pr-4" ref={scrollAreaRef}>
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.role === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                <div
                  className={`flex gap-3 max-w-[80%] ${
                    message.role === 'user' ? 'flex-row-reverse' : 'flex-row'
                  }`}
                >
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      message.role === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : message.role === 'assistant'
                        ? 'bg-secondary'
                        : 'bg-destructive text-destructive-foreground'
                    }`}
                  >
                    {message.role === 'user' ? (
                      <User className="w-4 h-4" />
                    ) : (
                      <Bot className="w-4 h-4" />
                    )}
                  </div>
                  
                  <div
                    className={`rounded-lg px-4 py-2 ${
                      message.role === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-muted'
                    }`}
                  >
                    {message.agent && (
                      <div className="text-xs opacity-70 mb-1">
                        {message.agent} agent
                      </div>
                    )}
                    <div className="whitespace-pre-wrap">{message.content}</div>
                    <div className="text-xs opacity-50 mt-1">
                      {message.timestamp.toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {streamingMessage && (
              <div className="flex gap-3 justify-start">
                <div className="flex gap-3 max-w-[80%]">
                  <div className="w-8 h-8 rounded-full flex items-center justify-center bg-secondary">
                    <Bot className="w-4 h-4" />
                  </div>
                  <div className="rounded-lg px-4 py-2 bg-muted">
                    <div className="whitespace-pre-wrap">{streamingMessage}</div>
                    <Loader2 className="w-3 h-3 animate-spin mt-1" />
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        
        <div className="flex gap-2 mt-4">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder={`Ask ${selectedAgent} agent...`}
            disabled={isLoading || !isConnected}
          />
          <Button
            onClick={handleSend}
            disabled={isLoading || !input.trim() || !isConnected}
          >
            {isLoading ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
          </Button>
        </div>
        
        {!isConnected && (
          <div className="text-sm text-destructive mt-2">
            Disconnected. Reconnecting...
          </div>
        )}
      </CardContent>
    </Card>
  );
};