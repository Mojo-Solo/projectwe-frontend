"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  GitBranch,
  Copy,
  Check,
  FileText,
  AlertCircle,
  Sparkles,
  Code,
  Target,
} from "lucide-react";
import { cn } from "@/lib/utils";

interface PRTemplate {
  title: string;
  x: string; // What changed
  why: string; // Why it changed
  z: string; // How to verify
  truthLabels: string[];
  tests: string[];
  breakingChanges: string;
}

export function PRTemplateGenerator() {
  const [template, setTemplate] = useState<PRTemplate>({
    title: "",
    x: "",
    why: "",
    z: "",
    truthLabels: [],
    tests: [],
    breakingChanges: "",
  });

  const [generatedPR, setGeneratedPR] = useState<string>("");
  const [copied, setCopied] = useState(false);
  const [newTruthLabel, setNewTruthLabel] = useState("");
  const [newTest, setNewTest] = useState("");

  const generatePRDescription = () => {
    const pr = `## ${template.title || "PR Title"}

### X (What Changed)
${template.x || "Describe what was changed in this PR..."}

### WHY (Motivation)
${template.why || "Explain why these changes were necessary..."}

### Z (Verification)
${template.z || "Describe how to verify these changes work correctly..."}

### Truth Labels
${
  template.truthLabels.length > 0
    ? template.truthLabels.map((label) => `- ✓ ${label}`).join("\n")
    : "- No truth labels added yet"
}

### Tests Added/Modified
${
  template.tests.length > 0
    ? template.tests.map((test) => `- 🧪 ${test}`).join("\n")
    : "- No tests specified yet"
}

${
  template.breakingChanges
    ? `### ⚠️ Breaking Changes
${template.breakingChanges}`
    : ""
}

---
Generated by True One® Engineering Assistant`;

    setGeneratedPR(pr);
  };

  const handleCopy = async () => {
    await navigator.clipboard.writeText(generatedPR);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const addTruthLabel = () => {
    if (newTruthLabel.trim()) {
      setTemplate((prev) => ({
        ...prev,
        truthLabels: [...prev.truthLabels, newTruthLabel.trim()],
      }));
      setNewTruthLabel("");
    }
  };

  const addTest = () => {
    if (newTest.trim()) {
      setTemplate((prev) => ({
        ...prev,
        tests: [...prev.tests, newTest.trim()],
      }));
      setNewTest("");
    }
  };

  const removeTruthLabel = (index: number) => {
    setTemplate((prev) => ({
      ...prev,
      truthLabels: prev.truthLabels.filter((_, i) => i !== index),
    }));
  };

  const removeTest = (index: number) => {
    setTemplate((prev) => ({
      ...prev,
      tests: prev.tests.filter((_, i) => i !== index),
    }));
  };

  return (
    <div className="space-y-6">
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>
          The X/WHY/Z format ensures clear communication of changes,
          motivations, and verification steps in every PR.
        </AlertDescription>
      </Alert>

      <Tabs defaultValue="edit" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="edit">Edit Template</TabsTrigger>
          <TabsTrigger value="preview">Preview PR</TabsTrigger>
        </TabsList>

        <TabsContent value="edit" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>PR Information</CardTitle>
              <CardDescription>
                Fill in the details for your pull request
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">PR Title</Label>
                <Input
                  id="title"
                  value={template.title}
                  onChange={(e) =>
                    setTemplate((prev) => ({ ...prev, title: e.target.value }))
                  }
                  placeholder="feat: Add truth label verification system"
                />
              </div>

              <div className="grid gap-4 md:grid-cols-3">
                <div className="space-y-2">
                  <Label htmlFor="x" className="flex items-center gap-2">
                    <Code className="h-4 w-4" />X (What Changed)
                  </Label>
                  <Textarea
                    id="x"
                    value={template.x}
                    onChange={(e) =>
                      setTemplate((prev) => ({ ...prev, x: e.target.value }))
                    }
                    placeholder="Describe what was changed..."
                    className="min-h-[100px]"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="why" className="flex items-center gap-2">
                    <Target className="h-4 w-4" />
                    WHY (Motivation)
                  </Label>
                  <Textarea
                    id="why"
                    value={template.why}
                    onChange={(e) =>
                      setTemplate((prev) => ({ ...prev, why: e.target.value }))
                    }
                    placeholder="Explain why these changes were made..."
                    className="min-h-[100px]"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="z" className="flex items-center gap-2">
                    <Check className="h-4 w-4" />Z (Verification)
                  </Label>
                  <Textarea
                    id="z"
                    value={template.z}
                    onChange={(e) =>
                      setTemplate((prev) => ({ ...prev, z: e.target.value }))
                    }
                    placeholder="How to verify the changes..."
                    className="min-h-[100px]"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Truth Labels</CardTitle>
                <CardDescription>
                  Add truth labels verified in this PR
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-2">
                  <Input
                    value={newTruthLabel}
                    onChange={(e) => setNewTruthLabel(e.target.value)}
                    placeholder="e.g., AUTH_SYSTEM_VERIFIED"
                    onKeyPress={(e) => e.key === "Enter" && addTruthLabel()}
                  />
                  <Button onClick={addTruthLabel} size="sm">
                    Add
                  </Button>
                </div>
                <div className="space-y-2">
                  {template.truthLabels.map((label, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-2 rounded bg-muted"
                    >
                      <span className="text-sm font-mono">{label}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeTruthLabel(index)}
                      >
                        Remove
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Tests</CardTitle>
                <CardDescription>List tests added or modified</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-2">
                  <Input
                    value={newTest}
                    onChange={(e) => setNewTest(e.target.value)}
                    placeholder="e.g., test/auth.spec.ts"
                    onKeyPress={(e) => e.key === "Enter" && addTest()}
                  />
                  <Button onClick={addTest} size="sm">
                    Add
                  </Button>
                </div>
                <div className="space-y-2">
                  {template.tests.map((test, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-2 rounded bg-muted"
                    >
                      <span className="text-sm">{test}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeTest(index)}
                      >
                        Remove
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Breaking Changes (Optional)</CardTitle>
              <CardDescription>
                Document any breaking changes in this PR
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Textarea
                value={template.breakingChanges}
                onChange={(e) =>
                  setTemplate((prev) => ({
                    ...prev,
                    breakingChanges: e.target.value,
                  }))
                }
                placeholder="Describe any breaking changes and migration steps..."
                className="min-h-[80px]"
              />
            </CardContent>
          </Card>

          <div className="flex justify-end">
            <Button onClick={generatePRDescription} size="lg">
              <Sparkles className="mr-2 h-4 w-4" />
              Generate PR Description
            </Button>
          </div>
        </TabsContent>

        <TabsContent value="preview" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Generated PR Description</CardTitle>
                  <CardDescription>
                    Copy this description to your pull request
                  </CardDescription>
                </div>
                <Button
                  onClick={handleCopy}
                  disabled={!generatedPR}
                  variant="outline"
                  size="sm"
                >
                  {copied ? (
                    <>
                      <Check className="mr-2 h-4 w-4" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="mr-2 h-4 w-4" />
                      Copy
                    </>
                  )}
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {generatedPR ? (
                <div className="rounded-lg border bg-muted/50 p-4">
                  <pre className="whitespace-pre-wrap text-sm font-mono">
                    {generatedPR}
                  </pre>
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>
                    Fill in the template and click &quot;Generate PR
                    Description&quot; to see the preview
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
