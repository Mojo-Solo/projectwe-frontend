import { isDbAvailable, requireDbAsync } from '@/lib/db-guard';
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { db } from "@/lib/database";
import { tasks } from "@/db/schema";
import { and, eq } from "drizzle-orm";
import { z } from "zod";

// ... GET and PUT handlers and schema remain the same

export async function DELETE(
  req: NextRequest,
  { params }: { params: { taskId: string } },
) {
  if (!isDbAvailable()) {
    return NextResponse.json(
      { error: 'Service temporarily unavailable' },
      { status: 503 }
    );
  }
  
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const [task] = await db
      .select()
      .from(tasks)
      .where(
        and(
          eq(tasks.id, params.taskId),
          eq(tasks.organizationId, session.user.organizationId),
        ),
      )
      .limit(1);

    if (!task) {
      return NextResponse.json({ error: "Task not found" }, { status: 404 });
    }

    if (task.creatorId !== session.user.id && session.user.role === "USER") {
      return NextResponse.json({ error: "Permission denied" }, { status: 403 });
    }

    await db.delete(tasks).where(eq(tasks.id, params.taskId));

    return NextResponse.json({ message: "Task deleted successfully" });
  } catch (error) {
    console.error("Error deleting task:", error);
    return NextResponse.json(
      { error: "Failed to delete task" },
      { status: 500 },
    );
  }
}
