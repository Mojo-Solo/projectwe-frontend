import { isDbAvailable, requireDbAsync } from '@/lib/db-guard';
import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { z } from "zod";
import { db } from "@/db/client";
import { users } from "@/db/schema/user";
import { organizations } from "@/db/schema/organization";
import { notifications } from "@/db/schema/notifications";
import { aiAgents } from "@/db/schema/ai";
import { eq } from "drizzle-orm";

const signupSchema = z.object({
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  organizationName: z.string().min(1, "Organization name is required"),
});

export async function POST(req: NextRequest) {
  if (!isDbAvailable()) {
    return NextResponse.json(
      { error: 'Service temporarily unavailable' },
      { status: 503 }
    );
  }
  
  try {
  try {
    const body = await req.json();
    const validation = signupSchema.safeParse(body);

    if (!validation.success) {
      return NextResponse.json(
        { error: validation.error.issues[0].message },
        { status: 400 },
      );
    }

    const { name, email, password, organizationName } = validation.data;

    // Check if user already exists
    const existingUserRows = await db
      .select()
      .from(users)
      .where(eq(users.email, email))
      .limit(1);

    if (existingUserRows.length > 0) {
      return NextResponse.json(
        { error: "User with this email already exists" },
        { status: 400 },
      );
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create organization slug
    const baseSlug = organizationName
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/(^-|-$)/g, "");

    let slug = baseSlug;
    let counter = 1;

    // Ensure unique slug
    while (true) {
      const existingOrgRows = await db
        .select()
        .from(organizations)
        .where(eq(organizations.slug, slug))
        .limit(1);

      if (existingOrgRows.length === 0) break;

      slug = `${baseSlug}-${counter}`;
      counter++;
    }

    // Create organization and user in a transaction
    const result = await db.transaction(async (tx) => {
      // Create organization
      const [organization] = await tx
        .insert(organizations)
        .values({
          name: organizationName,
          slug,
        })
        .returning();

      // Create user
      const [user] = await tx
        .insert(users)
        .values({
          name,
          email,
          password: hashedPassword,
          role: "OWNER", // First user is the owner
          organizationId: organization.id,
        })
        .returning({
          id: users.id,
          email: users.email,
          name: users.name,
          role: users.role,
        });

      // Create welcome notification
      await tx.insert(notifications).values({
        type: "WELCOME",
        title: "Welcome to WE-Exit!",
        message:
          "Start your strategic exit planning journey with our guided walkthrough.",
        userId: user.id,
      });

      // Create default AI agents for the organization
      const defaultAgents = [
        {
          name: "Legal Advisor",
          type: "LEGAL",
          description: "AI-powered legal analysis and document review",
          capabilities: {
            documentReview: true,
            complianceCheck: true,
            contractAnalysis: true,
          },
          configuration: {
            model: "gpt-4",
            temperature: 0.3,
            maxTokens: 2000,
          },
        },
        {
          name: "Financial Analyst",
          type: "FINANCIAL",
          description: "Financial planning and valuation analysis",
          capabilities: {
            valuationAnalysis: true,
            financialModeling: true,
            dueDiligenceSupport: true,
          },
          configuration: {
            model: "gpt-4",
            temperature: 0.2,
            maxTokens: 2000,
          },
        },
        {
          name: "Strategic Advisor",
          type: "STRATEGIC",
          description: "Strategic planning and market analysis",
          capabilities: {
            marketAnalysis: true,
            competitorResearch: true,
            strategyFormulation: true,
          },
          configuration: {
            model: "gpt-4",
            temperature: 0.5,
            maxTokens: 2000,
          },
        },
      ];

      await tx.insert(aiAgents).values(
        defaultAgents.map((agent) => ({
          ...agent,
          organizationId: organization.id,
        })),
      );

      return { user, organization };
    });

    return NextResponse.json(
      {
        message: "Account created successfully",
        user: result.user,
      },
      { status: 201 },
    );
  } catch (error) {
    console.error("Signup error:", error);
    return NextResponse.json(
      { error: "Failed to create account" },
      { status: 500 },
    );
  }
  } catch (error) {
    console.error('Database error in POST:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
