import { isDbAvailable, requireDbAsync } from '@/lib/db-guard';
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma-compat";
import { ClientIntelligence } from "@/types/client";
import {
  ActivityType,
  ActivityCategory,
  ActivityStatus,
  Priority,
  AssessmentStatus,
  DocumentStatus,
} from "@/types/client";
// Note: Simplified to work with current Drizzle schema

export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } },
) {
  if (!isDbAvailable()) {
    return NextResponse.json(
      { error: 'Service temporarily unavailable' },
      { status: 503 }
    );
  }
  
  try {
    // Authentication
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { id: clientId } = params;
    const { searchParams } = new URL(req.url);
    const refresh = searchParams.get("refresh") === "true";

    // Verify client access
    const client = await prisma.client.findFirst({
      where: {
        id: clientId,
        organizationId: session.user.organizationId,
        ...(session.user.role === "ADVISOR"
          ? {
              advisorId: session.user.id,
            }
          : {}),
      },
      include: {
        assessments: {
          where: { status: AssessmentStatus.COMPLETED },
          orderBy: { createdAt: "desc" },
          take: 5,
        },
        documents: {
          where: { status: DocumentStatus.APPROVED },
          orderBy: { createdAt: "desc" },
          take: 10,
        },
        activities: {
          where: { completedAt: { not: null } },
          orderBy: { createdAt: "desc" },
          take: 10,
        },
      },
    });

    if (!client) {
      return NextResponse.json({ error: "Client not found" }, { status: 404 });
    }

    // Check if we have recent intelligence data and don't need to refresh
    const existingIntelligence = (client.metadata as any)?.aiInsights;
    const shouldGenerate =
      refresh ||
      !existingIntelligence ||
      !existingIntelligence.lastUpdated ||
      new Date(existingIntelligence.lastUpdated) <
        new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 hours

    let intelligence: ClientIntelligence;

    if (shouldGenerate) {
      // Generate new intelligence
      intelligence = await generateClientIntelligence(client);

      // Store in client record
      await prisma.client.update({
        where: { id: clientId },
        data: {
          metadata: {
            ...((client.metadata as any) || {}),
            aiInsights: intelligence,
          },
        },
      });

      // Log intelligence generation
      await prisma.clientActivity.create({
        data: {
          clientId,
          userId: session.user.id,
          type: ActivityType.NOTE,
          category: ActivityCategory.REVIEW,
          title: "AI Intelligence Generated",
          description:
            "Generated comprehensive AI-powered insights and recommendations",
          status: ActivityStatus.COMPLETED,
          taskPriority: Priority.MEDIUM,
          completedAt: new Date(),
        },
      });
    } else {
      intelligence = existingIntelligence;
    }

    return NextResponse.json(intelligence);
  } catch (error) {
    console.error("Error fetching client intelligence:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 },
    );
  }
}

export async function POST(
  req: NextRequest,
  { params }: { params: { id: string } },
) {
  if (!isDbAvailable()) {
    return NextResponse.json(
      { error: 'Service temporarily unavailable' },
      { status: 503 }
    );
  }
  
  try {
    // Authentication
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Only advisors and admins can trigger intelligence generation
    if (!["ADMIN", "ADVISOR"].includes(session.user.role)) {
      return NextResponse.json(
        { error: "Insufficient permissions" },
        { status: 403 },
      );
    }

    const { id: clientId } = params;

    // Verify client access
    const client = await prisma.client.findFirst({
      where: {
        id: clientId,
        organizationId: session.user.organizationId,
        ...(session.user.role === "ADVISOR"
          ? {
              advisorId: session.user.id,
            }
          : {}),
      },
      include: {
        assessments: {
          where: { status: AssessmentStatus.COMPLETED },
          orderBy: { createdAt: "desc" },
        },
        documents: {
          where: { status: DocumentStatus.APPROVED },
          orderBy: { createdAt: "desc" },
        },
        activities: {
          where: { completedAt: { not: null } },
          orderBy: { createdAt: "desc" },
        },
      },
    });

    if (!client) {
      return NextResponse.json({ error: "Client not found" }, { status: 404 });
    }

    // Generate fresh intelligence
    const intelligence = await generateClientIntelligence(client);

    // Store in client record
    await prisma.client.update({
      where: { id: clientId },
      data: {
        metadata: {
          ...((client.metadata as any) || {}),
          aiInsights: intelligence,
        },
      },
    });

    // Log intelligence generation
    await prisma.clientActivity.create({
      data: {
        clientId,
        userId: session.user.id,
        type: ActivityType.NOTE,
        category: ActivityCategory.ANALYSIS,
        title: "AI Intelligence Refreshed",
        description: "Manually triggered AI intelligence refresh and analysis",
        status: ActivityStatus.COMPLETED,
        taskPriority: Priority.HIGH,
        completedAt: new Date(),
      },
    });

    return NextResponse.json(intelligence);
  } catch (error) {
    console.error("Error generating client intelligence:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 },
    );
  }
}

// Helper function to generate comprehensive client intelligence
async function generateClientIntelligence(
  client: any,
): Promise<ClientIntelligence> {
  // Calculate exit readiness score based on multiple factors
  const exitReadinessScore = calculateExitReadinessScore(client);

  // Generate valuation range based on company data
  const valuationRange = calculateValuationRange(client);

  // Assess market conditions
  const marketConditions = assessMarketConditions(client);

  // Identify risk factors
  const riskFactors = identifyRiskFactors(client);

  // Generate recommendations
  const recommendations = generateRecommendations(
    client,
    exitReadinessScore,
    riskFactors,
  );

  // Competitive analysis (if data available)
  const competitiveAnalysis = await generateCompetitiveAnalysis(client);

  return {
    clientId: client.id,
    exitReadinessScore,
    valuationRange,
    marketConditions,
    riskFactors,
    recommendations,
    competitiveAnalysis,
    lastUpdated: new Date(),
  };
}

function calculateExitReadinessScore(client: any): number {
  let score = 0;
  let factors = 0;

  // Financial factors (40% weight)
  if (client.annualRevenue) {
    if (client.annualRevenue > 10000000)
      score += 25; // $10M+ revenue
    else if (client.annualRevenue > 5000000)
      score += 20; // $5M+ revenue
    else if (client.annualRevenue > 1000000)
      score += 15; // $1M+ revenue
    else score += 5;
    factors++;
  }

  if (client.profitMargin) {
    if (client.profitMargin > 20)
      score += 15; // 20%+ margin
    else if (client.profitMargin > 10)
      score += 10; // 10%+ margin
    else if (client.profitMargin > 0) score += 5; // Profitable
    factors++;
  }

  if (client.revenueGrowthRate) {
    if (client.revenueGrowthRate > 25)
      score += 10; // 25%+ growth
    else if (client.revenueGrowthRate > 10)
      score += 8; // 10%+ growth
    else if (client.revenueGrowthRate > 0) score += 5; // Positive growth
    factors++;
  }

  // Operational factors (30% weight)
  if (client.yearsInBusiness) {
    if (client.yearsInBusiness > 10)
      score += 15; // 10+ years
    else if (client.yearsInBusiness > 5)
      score += 10; // 5+ years
    else if (client.yearsInBusiness > 2) score += 5; // 2+ years
    factors++;
  }

  // Market factors (20% weight)
  if (client.companySize) {
    if (["LARGE", "ENTERPRISE"].includes(client.companySize)) score += 10;
    else if (client.companySize === "MEDIUM") score += 8;
    else score += 5;
    factors++;
  }

  // Documentation and assessment completion (10% weight)
  const completedAssessments =
    client.assessments?.filter((a: any) => a.status === "COMPLETED").length ||
    0;
  if (completedAssessments > 2) score += 5;
  else if (completedAssessments > 0) score += 3;

  const documentCount = client.documents?.length || 0;
  if (documentCount > 10) score += 5;
  else if (documentCount > 5) score += 3;
  else if (documentCount > 0) score += 1;

  // Normalize score to 0-100 range
  const maxPossibleScore = 100;
  return Math.min(Math.round(score), maxPossibleScore);
}

function calculateValuationRange(client: any): {
  low: number;
  high: number;
  estimated: number;
} {
  if (!client.annualRevenue) {
    return { low: 0, high: 0, estimated: 0 };
  }

  // Industry multipliers (simplified - in real implementation, use more sophisticated models)
  const industryMultipliers: Record<string, { low: number; high: number }> = {
    Technology: { low: 3, high: 8 },
    Healthcare: { low: 2, high: 6 },
    "Financial Services": { low: 1.5, high: 4 },
    Manufacturing: { low: 1, high: 3 },
    "Professional Services": { low: 1, high: 2.5 },
    Retail: { low: 0.5, high: 2 },
  };

  const multiplier = industryMultipliers[client.industry] || {
    low: 1,
    high: 3,
  };

  // Adjust for profitability
  let profitAdjustment = 1;
  if (client.profitMargin) {
    if (client.profitMargin > 20) profitAdjustment = 1.3;
    else if (client.profitMargin > 10) profitAdjustment = 1.1;
    else if (client.profitMargin < 0) profitAdjustment = 0.7;
  }

  // Adjust for growth
  let growthAdjustment = 1;
  if (client.revenueGrowthRate) {
    if (client.revenueGrowthRate > 25) growthAdjustment = 1.4;
    else if (client.revenueGrowthRate > 10) growthAdjustment = 1.2;
    else if (client.revenueGrowthRate < 0) growthAdjustment = 0.8;
  }

  const baseValue = client.annualRevenue;
  const low = Math.round(
    baseValue * multiplier.low * profitAdjustment * growthAdjustment,
  );
  const high = Math.round(
    baseValue * multiplier.high * profitAdjustment * growthAdjustment,
  );
  const estimated = Math.round((low + high) / 2);

  return { low, high, estimated };
}

function assessMarketConditions(client: any): {
  score: number;
  factors: string[];
  outlook: "POSITIVE" | "NEUTRAL" | "NEGATIVE";
} {
  const factors: string[] = [];
  let score = 50; // Start neutral

  // Industry-specific factors (simplified)
  if (client.industry === "Technology") {
    score += 10;
    factors.push("Strong technology sector fundamentals");
  } else if (client.industry === "Healthcare") {
    score += 5;
    factors.push("Stable healthcare demand");
  }

  // Company size factors
  if (["LARGE", "ENTERPRISE"].includes(client.companySize)) {
    score += 5;
    factors.push("Scale advantages in current market");
  }

  // Growth factors
  if (client.revenueGrowthRate && client.revenueGrowthRate > 15) {
    score += 10;
    factors.push("Strong growth trajectory");
  }

  let outlook: "POSITIVE" | "NEUTRAL" | "NEGATIVE" = "NEUTRAL";
  if (score >= 70) outlook = "POSITIVE";
  else if (score <= 40) outlook = "NEGATIVE";

  return {
    score: Math.min(Math.max(score, 0), 100),
    factors,
    outlook,
  };
}

function identifyRiskFactors(client: any): {
  high: string[];
  medium: string[];
  low: string[];
} {
  const high: string[] = [];
  const medium: string[] = [];
  const low: string[] = [];

  // Financial risks
  if (!client.annualRevenue || client.annualRevenue < 1000000) {
    high.push("Low revenue may limit buyer interest");
  }

  if (client.profitMargin && client.profitMargin < 5) {
    high.push("Low profit margins reduce business attractiveness");
  }

  if (client.revenueGrowthRate && client.revenueGrowthRate < 0) {
    high.push("Declining revenue trend");
  }

  // Operational risks
  if (client.yearsInBusiness && client.yearsInBusiness < 3) {
    medium.push("Limited operating history");
  }

  // Market risks
  if (client.companySize === "MICRO") {
    medium.push("Small company size may limit exit options");
  }

  // Documentation risks
  const documentCount = client.documents?.length || 0;
  if (documentCount < 5) {
    medium.push("Insufficient documentation for due diligence");
  }

  // Exit planning risks
  if (!client.exitStrategy) {
    low.push("Exit strategy not yet defined");
  }

  if (!client.targetValuation) {
    low.push("Target valuation expectations not set");
  }

  return { high, medium, low };
}

function generateRecommendations(
  client: any,
  exitReadinessScore: number,
  riskFactors: any,
): { immediate: string[]; shortTerm: string[]; longTerm: string[] } {
  const immediate: string[] = [];
  const shortTerm: string[] = [];
  const longTerm: string[] = [];

  // Based on exit readiness score
  if (exitReadinessScore < 40) {
    immediate.push("Complete comprehensive business assessment");
    immediate.push("Organize financial documentation");
    shortTerm.push("Implement financial reporting improvements");
    longTerm.push("Focus on profitability and growth initiatives");
  } else if (exitReadinessScore < 70) {
    immediate.push("Refine exit strategy and timeline");
    shortTerm.push("Address identified operational gaps");
    shortTerm.push("Enhance business documentation");
  } else {
    immediate.push("Begin preliminary market outreach");
    shortTerm.push("Finalize investment memorandum");
    shortTerm.push("Identify potential strategic buyers");
  }

  // Address high-priority risks
  if (riskFactors.high.length > 0) {
    immediate.push("Address critical risk factors immediately");
    riskFactors.high.forEach((risk: string) => {
      if (risk.includes("revenue")) {
        shortTerm.push("Develop revenue diversification strategy");
      }
      if (risk.includes("profit")) {
        shortTerm.push("Implement cost optimization initiatives");
      }
    });
  }

  // Industry-specific recommendations
  if (client.industry === "Technology") {
    longTerm.push("Protect and document intellectual property");
    longTerm.push("Build recurring revenue streams");
  } else if (client.industry === "Manufacturing") {
    longTerm.push("Optimize operational efficiency");
    longTerm.push("Assess equipment and facility conditions");
  }

  return { immediate, shortTerm, longTerm };
}

async function generateCompetitiveAnalysis(client: any): Promise<
  | {
      competitors: string[];
      positioning: string;
      advantages: string[];
      challenges: string[];
    }
  | undefined
> {
  // In a real implementation, this would integrate with market research APIs
  // For now, return undefined or basic analysis based on industry

  if (!client.industry) return undefined;

  const industryAnalysis: Record<string, any> = {
    Technology: {
      competitors: [
        "Industry leaders",
        "Emerging tech companies",
        "Private equity backed firms",
      ],
      positioning: "Position as innovative technology solution provider",
      advantages: [
        "Technical expertise",
        "Market agility",
        "Customer relationships",
      ],
      challenges: [
        "Competition from larger players",
        "Rapid technology changes",
        "Talent retention",
      ],
    },
    Healthcare: {
      competitors: [
        "Healthcare conglomerates",
        "Specialized service providers",
        "Regional players",
      ],
      positioning: "Emphasize quality outcomes and regulatory compliance",
      advantages: [
        "Regulatory expertise",
        "Patient relationships",
        "Quality metrics",
      ],
      challenges: [
        "Regulatory complexity",
        "Reimbursement pressures",
        "Compliance costs",
      ],
    },
  };

  return (
    industryAnalysis[client.industry] || {
      competitors: [
        "Market leaders",
        "Regional competitors",
        "Emerging players",
      ],
      positioning:
        "Focus on unique value proposition and competitive advantages",
      advantages: [
        "Market knowledge",
        "Customer relationships",
        "Operational efficiency",
      ],
      challenges: [
        "Market competition",
        "Economic factors",
        "Industry changes",
      ],
    }
  );
}
