import { isDbAvailable, requireDbAsync } from '@/lib/db-guard';
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { db } from "@/lib/database";
import { projects, milestones } from "@/db/schema";
import { and, eq, desc } from "drizzle-orm";
import { z } from "zod";

// ... GET handler and schema remain the same

export async function POST(req: NextRequest) {
  if (!isDbAvailable()) {
    return NextResponse.json(
      { error: 'Service temporarily unavailable' },
      { status: 503 }
    );
  }
  
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await req.json();

    const projectSchema = z.object({
      name: z.string().min(1, "Name is required"),
      description: z.string().optional(),
      exitStrategy: z.string().optional(),
      targetDate: z.string().optional(),
      valuation: z.number().optional(),
    });

    const validation = projectSchema.safeParse(body);

    if (!validation.success) {
      return NextResponse.json(
        { error: "Invalid input", details: validation.error.flatten() },
        { status: 400 },
      );
    }

    const [project] = await db
      .insert(projects)
      .values({
        name: validation.data.name,
        description: validation.data.description,
        exitStrategy: validation.data.exitStrategy,
        targetDate: validation.data.targetDate
          ? new Date(validation.data.targetDate)
          : undefined,
        valuation: validation.data.valuation,
        organizationId: session.user.organizationId,
      })
      .returning();

    const defaultMilestones = [
      {
        title: "Initial Assessment",
        targetDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      },
      // ... other milestones
    ];

    await db.insert(milestones).values(
      defaultMilestones.map((milestone) => ({
        ...milestone,
        projectId: project.id,
      })),
    );

    return NextResponse.json(project, { status: 201 });
  } catch (error) {
    console.error('Database error in POST:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
