// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  
  // 2FA
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  aiTasks       AITask[]
  exitStrategies ExitStrategy[]
  notifications Notification[]
  activities    Activity[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  @@index([email])
  @@index([role])
  @@index([status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Documents and Intelligence
model Document {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  content       String?   @db.Text
  fileUrl       String?
  fileSize      Int?
  mimeType      String?
  
  // AI Processing
  embedding     Float[]?  @db.Vector(1536)
  metadata      Json?
  extractedText String?   @db.Text
  summary       String?   @db.Text
  
  // Status
  status        DocumentStatus @default(PENDING)
  processingError String?
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiTasks       AITask[]
  versions      DocumentVersion[]
  shareLinks    ShareLink[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  processedAt   DateTime?
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model DocumentVersion {
  id          String   @id @default(cuid())
  documentId  String
  version     Int
  content     String?  @db.Text
  fileUrl     String?
  changes     Json?
  createdBy   String
  createdAt   DateTime @default(now())
  
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, version])
  @@index([documentId])
}

// AI and ML Tasks
model AITask {
  id            String    @id @default(cuid())
  userId        String
  documentId    String?
  
  // Task Details
  type          AITaskType
  status        TaskStatus @default(PENDING)
  priority      Priority   @default(MEDIUM)
  
  // Input/Output
  input         Json
  output        Json?
  error         String?
  
  // Kafka Integration
  correlationId String?   @unique
  kafkaTopic    String?
  kafkaPartition Int?
  kafkaOffset   String?
  
  // Performance Metrics
  startedAt     DateTime?
  completedAt   DateTime?
  processingTime Int?     // in milliseconds
  retryCount    Int       @default(0)
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document      Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([documentId])
  @@index([status])
  @@index([type])
  @@index([correlationId])
  @@index([createdAt])
}

// Exit Planning
model ExitStrategy {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?   @db.Text
  
  // Business Details
  companyName   String?
  industry      String?
  revenue       Float?
  ebitda        Float?
  employees     Int?
  
  // Valuation
  estimatedValue Float?
  valuationMethod String?
  valuationDate DateTime?
  
  // Exit Details
  exitType      ExitType?
  targetDate    DateTime?
  readinessScore Float?
  
  // Analysis Results
  swotAnalysis  Json?
  riskFactors   Json?
  opportunities Json?
  actionItems   Json?
  
  // Status
  status        StrategyStatus @default(DRAFT)
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones    Milestone[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
  @@index([status])
}

model Milestone {
  id            String    @id @default(cuid())
  strategyId    String
  title         String
  description   String?   @db.Text
  dueDate       DateTime?
  completed     Boolean   @default(false)
  completedAt   DateTime?
  order         Int
  
  strategy      ExitStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  
  @@index([strategyId])
  @@index([completed])
}

// Notifications and Activity
model Notification {
  id            String    @id @default(cuid())
  userId        String
  title         String
  message       String    @db.Text
  type          NotificationType
  read          Boolean   @default(false)
  actionUrl     String?
  metadata      Json?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  readAt        DateTime?
  
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model Activity {
  id            String    @id @default(cuid())
  userId        String
  action        String
  entityType    String
  entityId      String
  metadata      Json?
  ipAddress     String?
  userAgent     String?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// Sharing
model ShareLink {
  id            String    @id @default(cuid())
  documentId    String
  token         String    @unique @default(cuid())
  expiresAt     DateTime?
  password      String?
  maxViews      Int?
  viewCount     Int       @default(0)
  active        Boolean   @default(true)
  
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([token])
  @@index([documentId])
  @@index([active])
}

// Enums
enum Role {
  USER
  ADVISOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum AITaskType {
  DOCUMENT_ANALYSIS
  VALUATION
  EXIT_PLANNING
  RISK_ASSESSMENT
  MARKET_ANALYSIS
  BUYER_MATCHING
  SUMMARY_GENERATION
  EMBEDDING_GENERATION
  CUSTOM
}

enum TaskStatus {
  PENDING
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  RETRYING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ExitType {
  ACQUISITION
  MERGER
  IPO
  MBO
  ESOP
  LIQUIDATION
  FAMILY_TRANSFER
  OTHER
}

enum StrategyStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK_COMPLETED
  DOCUMENT_PROCESSED
  MILESTONE_DUE
  SYSTEM
}
EOF < /dev/null